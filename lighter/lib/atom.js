// Generated by CoffeeScript 1.4.0
(function() {
  var app, blog, credentials, express, fs, helper, media, path, request, util, xml2js;

  require('should');

  helper = (require('../modules/helper'))();

  xml2js = require('xml2js');

  util = require('util');

  path = require('path');

  fs = require('fs');

  express = require('express');

  request = require('supertest');

  app = express();

  blog = (require(__dirname + '/init')).blog;

  media = (require(__dirname + '/init')).media;

  (require(path.join(__dirname, '../config')))(app);

  (require(path.join(__dirname, '../routes')))(app, blog.settings);

  credentials = util.format('%s:%s', blog.settings.username, blog.settings.password);

  describe('Atom', function() {
    request = request(app);
    describe('list posts', function() {
      var expected, id,
        _this = this;
      id = '';
      expected = 'test post';
      before(function(done) {
        var promise,
          _this = this;
        promise = blog.createPost({
          title: expected,
          author: 'Mehfuz Hossain',
          body: 'Empty body',
          publish: false
        });
        return promise.then(function(result) {
          id = result._id;
          return done();
        });
      });
      it('should return drafts when authorized', function(done) {
        var get;
        get = request.get('/api/atom/feeds');
        get.set('authorization', util.format('Basic %s', new Buffer(credentials).toString('base64')));
        return get.expect(200).end(function(err, res) {
          var parser;
          if (err !== null) {
            throw err;
          }
          parser = new xml2js.Parser();
          return parser.parseString(res.text, function(err, result) {
            var entry, match, _i, _len, _ref;
            match = false;
            _ref = result.feed.entry;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              entry = _ref[_i];
              if (entry.title[0] === expected) {
                match = true;
              }
            }
            match.should.be["true"];
            return done();
          });
        });
      });
      it('should return only the published when not authorized', function(done) {
        var get;
        get = request.get('/api/atom/feeds');
        return get.expect(200).end(function(err, res) {
          var parser;
          if (err !== null) {
            throw err;
          }
          parser = new xml2js.Parser();
          return parser.parseString(res.text, function(err, result) {
            var entry, match, _i, _len, _ref;
            match = false;
            if (typeof result.feed.entry !== 'undefined') {
              _ref = result.feed.entry;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                entry = _ref[_i];
                entry.title[0].should.not.equal(expected);
              }
            }
            return done();
          });
        });
      });
      return after(function(done) {
        return blog.deletePost(id, function() {
          return done();
        });
      });
    });
    describe('POST /api/atom/feeds', function() {
      var id,
        _this = this;
      id = '';
      it('should return 401 for unauthorized request', function(done) {
        var post;
        post = request.post('/api/atom/feeds');
        return post.expect(401).end(function(err, res) {
          if (err !== null) {
            throw err;
          }
          return done();
        });
      });
      it('should return www authentication header for unauthorized request', function(done) {
        var post;
        post = request.post('/api/atom/feeds');
        return post.expect(401).end(function(err, res) {
          var wwwAuthHeader;
          if (err !== null) {
            throw err;
          }
          wwwAuthHeader = res.headers['WWW-Authenticate'.toLowerCase()];
          wwwAuthHeader.should.be.ok;
          wwwAuthHeader.indexOf('Basic').should.equal(0);
          return done();
        });
      });
      it('should return expceted resultset and statuscode', function(done) {
        var post;
        post = request.post('/api/atom/feeds');
        post.set('Content-Type', 'application/atom+xml');
        post.set('authorization', util.format('Basic %s', new Buffer(credentials).toString('base64')));
        return fs.readFile(__dirname + '/post.xml', 'utf8', function(err, result) {
          post.write(result);
          return post.expect(201).end(function(err, res) {
            var parser;
            if (err !== null) {
              throw err;
            }
            parser = new xml2js.Parser();
            parser.parseString(res.text, function(err, result) {
              var lastIndex;
              result.entry.title[0].should.be.ok;
              result.entry.content[0].should.be.ok;
              result.entry.id[0].should.be.ok;
              lastIndex = result.entry.id[0].lastIndexOf('/') + 1;
              return id = result.entry.id[0].substr(lastIndex);
            });
            return done();
          });
        });
      });
      return afterEach(function(done) {
        return blog.deletePost(id, function() {
          return done();
        });
      });
    });
    describe('PUT /api/atom/entries/:id', function() {
      var expected, id,
        _this = this;
      id = '';
      expected = 'test post';
      before(function(done) {
        var promise,
          _this = this;
        promise = blog.createPost({
          title: expected,
          author: 'Mehfuz Hossain',
          body: 'Empty body'
        });
        return promise.then(function(result) {
          id = result._id;
          return done();
        });
      });
      it('should return 401 for unauthorized request', function(done) {
        var req;
        req = request.put(util.format('/api/atom/entries/%s', id));
        return req.expect(401).end(function(err, res) {
          if (err !== null) {
            throw err;
          }
          return done();
        });
      });
      it('should update post with correct status code when authorized', function(done) {
        var req;
        req = request.put(util.format('/api/atom/entries/%s', id));
        req.set('Content-Type', 'application/atom+xml');
        req.set('authorization', util.format('Basic %s', new Buffer(credentials).toString('base64')));
        return fs.readFile(__dirname + '/post.xml', 'utf8', function(err, result) {
          req.write(result);
          return req.expect(200).end(function(err, res) {
            var parser;
            if (err !== null) {
              throw err;
            }
            parser = new xml2js.Parser();
            parser.parseString(res.text, function(err, result) {
              result.entry.title[0].should.be.ok;
              result.entry.content[0].should.not.equal(0);
              return result.entry.id[0].should.be.ok;
            });
            return done();
          });
        });
      });
      return after(function(done) {
        return blog.deletePost(id, function() {
          return done();
        });
      });
    });
    describe('DELETE /api/atom/entries/:id', function() {
      var expected, id;
      expected = 'test post';
      id = '';
      before(function(done) {
        var promise,
          _this = this;
        promise = blog.createPost({
          title: expected,
          author: 'Mehfuz Hossain',
          body: 'Empty body'
        });
        return promise.then(function(result) {
          id = result._id;
          return done();
        });
      });
      it('should return 401 for unauthorized request', function(done) {
        var req;
        req = request.del(util.format('/api/atom/entries/%s', id));
        return req.expect(401).end(function(err, res) {
          if (err !== null) {
            throw err;
          }
          return done();
        });
      });
      return it('should return expected for authorized request', function(done) {
        var req;
        req = request.del(util.format('/api/atom/entries/%s', id));
        req = req.set('authorization', util.format('Basic %s', new Buffer(credentials).toString('base64')));
        return req.expect(200).end(function(err, res) {
          if (err !== null) {
            throw err;
          }
          return done();
        });
      });
    });
    return describe('POST /api/atom/images', function() {
      it('should return 201 for successful upload', function(done) {
        var req;
        req = request.post('/api/atom/images');
        req.set('slug', 'logo.png');
        req.set('content-type', 'image/png');
        req.set('authorization', util.format('Basic %s', new Buffer(credentials).toString('base64')));
        return fs.readFile(__dirname + '/../public/logo.png', function(err, result) {
          if (err !== null) {
            throw err;
          }
          req.write(result);
          return req.expect(201).end(function(err, result) {
            var parser;
            parser = new xml2js.Parser();
            return parser.parseString(result.text, function(err, result) {
              var imageUrl, slug;
              slug = 'logo.png';
              result.entry.title[0].should.equal(slug);
              result.entry.content[0].$.type.should.equal('image/png');
              imageUrl = util.format('http://%s/images/%s', req.host, helper.linkify(slug));
              result.entry.content[0].$.src.should.equal(imageUrl);
              result.entry.summary[0].should.equal(slug);
              return done();
            });
          });
        });
      });
      return after(function(done) {
        var url;
        url = helper.linkify('logo.png');
        return media.remove(url, function() {
          return done();
        });
      });
    });
  });

}).call(this);
