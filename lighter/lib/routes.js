// Generated by CoffeeScript 1.4.0
(function() {
  var app, blog, express, fs, helper, path, request, util, xml2js;

  require('should');

  helper = (require('../modules/helper'))();

  xml2js = require('xml2js');

  util = require('util');

  path = require('path');

  fs = require('fs');

  express = require('express');

  request = require('supertest');

  app = express();

  blog = (require(__dirname + '/init')).blog;

  (require(path.join(__dirname, '../config')))(app);

  (require(path.join(__dirname, '../routes')))(app, blog.settings);

  describe('routes', function() {
    request = request(app);
    return describe('find post by permaLink', function() {
      var expected, id;
      id = '';
      expected = 'test post';
      beforeEach(function(done) {
        var promise,
          _this = this;
        promise = blog.createPost({
          title: expected,
          author: 'Mehfuz Hossain',
          body: 'Empty body'
        });
        return promise.then(function(result) {
          id = result._id;
          return done();
        });
      });
      it('should return the post', function(done) {
        var permaLink, post;
        permaLink = '/' + helper.linkify(expected);
        post = request.get(permaLink);
        return post.expect(200).end(function(err, res) {
          if (err !== null) {
            throw err;
          }
          return done();
        });
      });
      it('should return 301 when post is moved', function(done) {
        var promise, updatedTitle;
        updatedTitle = 'another post';
        promise = blog.updatePost({
          id: id,
          title: updatedTitle,
          body: 'nothing'
        });
        return promise.then(function(result) {
          var permaLink, post;
          permaLink = '/' + helper.linkify(expected);
          post = request.get(permaLink);
          return post.expect(301).end(function(err, res) {
            if (err !== null) {
              throw err;
            }
            (res.text.indexOf(helper.linkify(updatedTitle)) >= 0).should.be["true"];
            return done();
          });
        });
      });
      return afterEach(function(done) {
        return blog.deletePost(id, function() {
          return done();
        });
      });
    });
  });

}).call(this);
